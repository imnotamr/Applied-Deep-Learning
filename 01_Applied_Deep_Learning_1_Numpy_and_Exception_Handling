{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Numpy**"
      ],
      "metadata": {
        "id": "F9VUZY0iMrUF"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "PQKuoz0DFHSa"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# One dimension array\n",
        "arr = np.array([10,5,88,9,0])\n",
        "print(arr)\n",
        "print(type(arr))\n",
        "print(arr.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XG395oVaHt_W",
        "outputId": "d6efe80b-fa22-44c7-9ba5-2c845fcd7d2b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10  5 88  9  0]\n",
            "<class 'numpy.ndarray'>\n",
            "int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T8lpOQ3rIJyC",
        "outputId": "4619e58c-2d54-4c36-b1ea-adda7c0372fc"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5,)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.sum(arr))\n",
        "print(np.min(arr))\n",
        "print(np.max(arr))\n",
        "print(np.mean(arr))\n",
        "print(np.median(arr))\n",
        "print(np.std(arr))\n",
        "print(np.sqrt(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jFhvUTfyMTOc",
        "outputId": "0760d5fd-d4e5-46f5-c02c-862e79a4cfb5"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "112\n",
            "0\n",
            "88\n",
            "22.4\n",
            "9.0\n",
            "32.98848283871206\n",
            "[3.16227766 2.23606798 9.38083152 3.         0.        ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Two dimension array\n",
        "multarr = np.array([[1,2,3],[7,10,4]])\n",
        "print(multarr)\n",
        "print(type(multarr))\n",
        "print(multarr.dtype)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3ZbpEFM6I19q",
        "outputId": "3650f55a-cb73-42ef-d5ab-378d39e0ecd7"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3]\n",
            " [ 7 10  4]]\n",
            "<class 'numpy.ndarray'>\n",
            "int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.sum(multarr))\n",
        "print(np.min(multarr))\n",
        "print(np.max(multarr))\n",
        "print(np.mean(multarr))\n",
        "print(np.median(multarr))\n",
        "print(np.std(multarr))\n",
        "print(np.sqrt(multarr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9V09Pm8mMYcc",
        "outputId": "12349d76-5859-4a63-f369-26614d2f54e6"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "27\n",
            "1\n",
            "10\n",
            "4.5\n",
            "3.5\n",
            "3.095695936834452\n",
            "[[1.         1.41421356 1.73205081]\n",
            " [2.64575131 3.16227766 2.        ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "multarr.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mhaLnZ3DJMHb",
        "outputId": "8e6c5bf4-546a-4714-a747-c7c760590c85"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Slicing\n",
        "arr[0:3]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J-QMooNnJNqm",
        "outputId": "1f38c30b-bd8a-4703-fe07-24d33572f3a9"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([10,  5, 88])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# One's array\n",
        "np.ones(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ioHrj_rrJqJG",
        "outputId": "04ed9d28-1684-46a2-d4bf-e5fdf7fbf278"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1., 1., 1., 1., 1.])"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Zero's array\n",
        "np.zeros(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "czRgZnVfKeU7",
        "outputId": "a3d78b74-7972-416a-dd2d-74d95c106193"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 0., 0., 0., 0.])"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Random 1-D array\n",
        "np.random.rand(15)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "crOufONqKkvx",
        "outputId": "816e9f37-3121-451a-b220-d55b5cdb6eaa"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2.04482633e-01, 3.52245511e-01, 9.77584251e-01, 3.03155768e-01,\n",
              "       6.50537714e-01, 5.65252001e-01, 4.17213926e-01, 2.13051196e-01,\n",
              "       6.34178273e-01, 6.96011969e-01, 4.36121221e-04, 7.78474752e-01,\n",
              "       7.05064279e-01, 6.89313980e-01, 2.72415090e-01])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Random 2-D array\n",
        "np.random.rand(2,3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yCiiMnUyKgnb",
        "outputId": "3ee7a31e-080f-4845-abd2-6de2a7a5ec5b"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.08703162, 0.7018105 , 0.4818746 ],\n",
              "       [0.01930371, 0.75377393, 0.19244241]])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Random 3-D array\n",
        "np.random.rand(2,3,4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Sf61MY9KkBS",
        "outputId": "5c330a1e-6560-4f89-a314-6db747ce4877"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.69951043, 0.25215181, 0.66594047, 0.27906949],\n",
              "        [0.4541776 , 0.9817395 , 0.41372764, 0.21789689],\n",
              "        [0.34761764, 0.19591994, 0.84562802, 0.50708266]],\n",
              "\n",
              "       [[0.16136409, 0.11332137, 0.19668903, 0.84031041],\n",
              "        [0.19813042, 0.57994538, 0.09618571, 0.15090373],\n",
              "        [0.51540957, 0.01482558, 0.59346359, 0.00533518]]])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#create the identity matrix\n",
        "np.eye(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y5--fsgdKziT",
        "outputId": "f89ea062-c749-4c3d-acce-330b736e96cb"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0., 0., 0.],\n",
              "       [0., 1., 0., 0., 0.],\n",
              "       [0., 0., 1., 0., 0.],\n",
              "       [0., 0., 0., 1., 0.],\n",
              "       [0., 0., 0., 0., 1.]])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a 2x2 matrix for x\n",
        "x = np.array([[1, 2], [3, 4]])\n",
        "\n",
        "# Creating another 2x2 matrix for y\n",
        "y = np.array([[5, 6], [7, 8]])\n",
        "\n",
        "# Creating 1-dimensional arrays for v and w\n",
        "v = np.array([9, 10])\n",
        "w = np.array([11, 12])\n",
        "\n",
        "# Displaying the shape (dimensions) of x and v\n",
        "print('shape of x:', x.shape)\n",
        "print('shape of v:', v.shape)\n",
        "\n",
        "print(v.dot(w))  # Dot product of vectors v and w\n",
        "print(\" \")\n",
        "print(x.dot(v))  # Dot product of matrix x and vector v\n",
        "print(\" \")\n",
        "print(x.dot(y))  # Dot product of matrices x and y\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "099LXFsdLADG",
        "outputId": "3d4a04bc-1b43-4099-b640-330d217d3204"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "shape of x: (2, 2)\n",
            "shape of v: (2,)\n",
            "219\n",
            " \n",
            "[29 67]\n",
            " \n",
            "[[19 22]\n",
            " [43 50]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "myarr = np.array([[1, 2], [3, 4]])\n",
        "\n",
        "# Printing the original matrix\n",
        "print(\"original matrix\", myarr)\n",
        "\n",
        "# Printing the transpose of the matrix\n",
        "print(\"transpose matrix\", myarr.T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IKqZOBtFNEVt",
        "outputId": "7dce63d4-4f76-44fa-8a4f-c27a16525729"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "original matrix [[1 2]\n",
            " [3 4]]\n",
            "transpose matrix [[1 3]\n",
            " [2 4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a 4x3 matrix for x\n",
        "x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n",
        "\n",
        "# Creating a 1x3 vector for v\n",
        "v = np.array([1, 0, 1])\n",
        "\n",
        "# Tiling v to create a 4x3 matrix vv by repeating v 4 times along the first axis\n",
        "vv = np.tile(v, (4, 1))\n",
        "\n",
        "# Element-wise addition of x and vv\n",
        "sum_of_vectors = x + vv\n",
        "\n",
        "# Displaying the result of the addition\n",
        "print(sum_of_vectors)\n",
        "print(\" \")\n",
        "print(\" \")\n",
        "\n",
        "print(v)          # Displays the tiled version of v\n",
        "print(\" \")\n",
        "print(vv)           # Displays the original matrix x\n",
        "print(\" \")\n",
        "print(x)           # Displays the vector v\n",
        "print(\" \")\n",
        "print(x.shape)     # Shows the shape of x\n",
        "print(\" \")\n",
        "print(v.shape)     # Shows the shape of v"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "igzMluwaNvfT",
        "outputId": "fca631e8-53df-419f-c8d2-63e316f04ebc"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 2  2  4]\n",
            " [ 5  5  7]\n",
            " [ 8  8 10]\n",
            " [11 11 13]]\n",
            " \n",
            " \n",
            "[1 0 1]\n",
            " \n",
            "[[1 0 1]\n",
            " [1 0 1]\n",
            " [1 0 1]\n",
            " [1 0 1]]\n",
            " \n",
            "[[ 1  2  3]\n",
            " [ 4  5  6]\n",
            " [ 7  8  9]\n",
            " [10 11 12]]\n",
            " \n",
            "(4, 3)\n",
            " \n",
            "(3,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qo7K05UvOAde"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Explanation Handling**"
      ],
      "metadata": {
        "id": "GsADN_EBMZ6L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    print(1/0)\n",
        "except Exception as e:\n",
        "    print(e)\n",
        "finally:\n",
        "    print(\"My Name Is Amr\") # got printed anyway after finshing"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-KZscllxMmJM",
        "outputId": "77123953-d3e1-48c6-c5fe-a4398b6a7b3b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "division by zero\n",
            "My Name Is Amr\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    result = 10 / 0\n",
        "except ZeroDivisionError:\n",
        "    pass  #ignore the error and continue\n",
        "print(\"Hey, Iam Amr\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Plcy3SxJPz7u",
        "outputId": "61efe553-968d-4c14-e795-c37fbafcb1c9"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hey, Iam Amr\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = input()\n",
        "try:\n",
        "    b = [i for i in range(int(a))]  # Creates a list of numbers from 0 to a-1\n",
        "    print(b[4]/0)\n",
        "except ZeroDivisionError:\n",
        "    print(\"division by zero\")\n",
        "except ValueError:\n",
        "    print(\"ValueError\")\n",
        "except IndexError:\n",
        "    print(\"IndexError\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KlfJL04gM4JZ",
        "outputId": "eb03a02d-6592-4aaf-9b08-281981a36343"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.5\n",
            "ValueError\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = input()\n",
        "try:\n",
        "    b = [i for i in range(int(a))]  # Creates a list of numbers from 0 to a-1\n",
        "    print(b[4]/0)\n",
        "except ZeroDivisionError:\n",
        "    print(\"division by zero\")\n",
        "except ValueError:\n",
        "    print(\"ValueError\")\n",
        "except IndexError:\n",
        "    print(\"IndexError\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x8LWEdXFNKGZ",
        "outputId": "2ea6313a-cd05-4d79-a212-39986cbfeec0"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "IndexError\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a custom exception class\n",
        "class MyError(Exception):\n",
        "    def __init__(self, ErrorInfo):\n",
        "        super().__init__()  # initialize the parent Exception class\n",
        "        self.errorinfo = ErrorInfo\n",
        "\n",
        "    def __str__(self):\n",
        "        return self.errorinfo"
      ],
      "metadata": {
        "id": "_4jtN-AINf5d"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Raise an instance of the custom exception\n",
        "raise MyError(\"My Error\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 158
        },
        "id": "Duwz1uc-N0io",
        "outputId": "778adcfc-cbd9-4cd5-819f-5e1a55839ce6"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "error",
          "ename": "MyError",
          "evalue": "My Error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMyError\u001b[0m                                   Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-34-7cc9882c6b28>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Raise an instance of the custom exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mraise\u001b[0m \u001b[0mMyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"My Error\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mMyError\u001b[0m: My Error"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function using assert statement\n",
        "def func(a, b):\n",
        "    assert a == b  # Throws an AssertionError if a != b"
      ],
      "metadata": {
        "id": "BxA-BVfNN1Ts"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "func(4, 4)  # This will run without any raise"
      ],
      "metadata": {
        "id": "jJ-9zSQwOzWV"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "func(1, 2)  # This will raise an AssertionError because 1 is not equal to 2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "9La_haEgN5xF",
        "outputId": "b44d468f-ac58-457d-c82a-682e35381976"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AssertionError",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-37-bda6d51191af>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# This will raise an AssertionError because 1 is not equal to 2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-29-90f369c85ac8>\u001b[0m in \u001b[0;36mfunc\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Function using assert statement\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;32massert\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mb\u001b[0m  \u001b[0;31m# Throws an AssertionError if a != b\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAssertionError\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Raising Custom Exceptions\n",
        "def check_positive(number):\n",
        "    if number < 0:\n",
        "        raise NegativeNumberError(\"Negative number entered\")\n",
        "    return number\n",
        "\n",
        "try:\n",
        "    check_positive(-5)\n",
        "except NegativeNumberError as e:\n",
        "    print(f\"Custom error: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lPenhnvWN7b1",
        "outputId": "257dcba6-9b14-4caf-e2bb-13a7fb91a952"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Custom error: Negative number entered\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Exception Chaining with raise from (Nested Try)\n",
        "try:\n",
        "    try:\n",
        "        num = int(\"number\")\n",
        "    except ValueError as e:\n",
        "        raise RuntimeError(\"Failed to convert string to integer\") from e\n",
        "except RuntimeError as e:\n",
        "    print(f\"RuntimeError: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ENpVXbVIPbeN",
        "outputId": "58fe1338-e257-4ed1-ec00-f0e3f0c67165"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RuntimeError: Failed to convert string to integer\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Custom Exception Messages\n",
        "class AgeError(Exception):\n",
        "    def __init__(self, age, message=\"Age must be 22\"):\n",
        "        self.age = age\n",
        "        self.message = message\n",
        "        super().__init__(self.message)\n",
        "\n",
        "def check_age(age):\n",
        "    if age < 22:\n",
        "        raise AgeError(age)\n",
        "\n",
        "try:\n",
        "    check_age(15)\n",
        "except AgeError as e:\n",
        "    print(f\"Error: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g70MRpF1Pn-0",
        "outputId": "96fe1d4c-3fd1-4367-f8a5-58a9ea3efb75"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error: Age must be 22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bZg5XiqEQcPt"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
